package com.app.mvc.controller;import com.app.mvc.beans.JsonData;import com.app.mvc.beans.JsonMapper;import com.app.mvc.util.HashUtil;import com.app.mvc.util.HttpClientUtil;import com.app.mvc.util.MD5Util;import com.app.mvc.util.StringUtil;import com.google.common.collect.Maps;import lombok.extern.slf4j.Slf4j;import org.apache.commons.lang3.StringUtils;import org.springframework.stereotype.Controller;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RequestParam;import org.springframework.web.bind.annotation.ResponseBody;import java.nio.charset.Charset;import java.util.LinkedHashMap;import java.util.Map;/** * Created by jimin on 15/12/8. */@Slf4j@Controllerpublic class ToolsController {    @ResponseBody    @RequestMapping("/wanhao/url.json")    public JsonData getUrl(@RequestParam("fromDate") String fromDate, @RequestParam("toDate") String toDate) {        fromDate = fromDate + "000000";        toDate = toDate + "235959";        String version = "2.1";        String signKey = "FEBD8A44C1D646E8BCE21E5310D9BBF7";        log.info("fromDate:{}, toDate:{}, version:{}, signKey:{}", fromDate, toDate, version, signKey);        String url = build(fromDate, toDate, version, signKey);        log.info("url:{}", url);        return JsonData.success(url);    }    private String build(String fromDate, String toDate, String version, String signKey) {        return "https://a4dd.trade.qunar.com/api/ota/otaQueryOrder?fromDate=" + fromDate + "&toDate=" + toDate + "&version=" + version + "&hmac=" + (MD5Util                .MD5(signKey + fromDate + toDate + version).toLowerCase());    }    @ResponseBody    @RequestMapping("/exchangerate.json")    public String getExchangeRate(@RequestParam("currency") String currency) {        String url = "https://pay.qunar.com/payServer/api/QueryForexRate.do";        String version = "20130808";        String busiTypeId = "HotelQTA";        String merchantCode = "HotelQTAJK";        Map<String, String> postParameter = Maps.newHashMap();        postParameter.put("version", version);        postParameter.put("busiTypeId", busiTypeId);        postParameter.put("merchantCode", merchantCode);        postParameter.put("curId", currency);        postParameter.put("HMAC", calFetchExchangeRateHMAC(currency));        log.info(JsonMapper.obj2String(postParameter));        String data = url + "?version=" + version + "&busiTypeId=" + busiTypeId + "&merchantCode=" + merchantCode + "&curId=" + currency + "&HMAC="                + calFetchExchangeRateHMAC(currency);        long start = System.currentTimeMillis();        String ret = HttpClientUtil.executePOST(url, postParameter);        log.info("cost:{}", System.currentTimeMillis() - start);        return ret;    }    /**     * qunarpay.url=https://pay.qunar.com/payServer/api/     * qunarpay.version=20130808     * qunarpay.key=7F9D07A3D1CCCCA9E1CD88B0D9AB3926     * <p/>     * qta.merchantcode=HotelQTAJK     * qta.busitypeid=HotelQTA     * <p/>     * qunarpay.exrate.api=QueryForexRate.do     */    private String calFetchExchangeRateHMAC(String currencyCode) {        LinkedHashMap<String, String> paramMap = Maps.newLinkedHashMap();        paramMap.put("version", "20130808");        paramMap.put("busiTypeId", "HotelQTA");        paramMap.put("merchantCode", "HotelQTAJK");        paramMap.put("curId", currencyCode);        return buildHMACStr(paramMap);    }    public static String buildHMACStr(LinkedHashMap<String, String> paramMap) {        StringBuilder hmac = new StringBuilder();        hmac.append("signKey=").append("7F9D07A3D1CCCCA9E1CD88B0D9AB3926").append("&");        for (Map.Entry<String, String> entry : paramMap.entrySet()) {            if (StringUtils.isNotBlank(entry.getValue())) {                hmac.append(entry.getKey()).append("=").append(entry.getValue()).append("&");            }        }        String HMAC = hmac.length() > 0 ? hmac.substring(0, hmac.length() - 1) : hmac.toString();        return StringUtil.toHexString(HashUtil.hashMD5(HMAC.getBytes(Charset.forName("UTF-8"))));    }}