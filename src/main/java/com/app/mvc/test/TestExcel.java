package com.app.mvc.test;import com.app.mvc.beans.JsonMapper;import com.google.common.collect.Maps;import com.google.common.collect.Sets;import lombok.extern.slf4j.Slf4j;import org.apache.commons.lang3.StringUtils;import org.apache.poi.hssf.usermodel.HSSFCell;import org.apache.poi.ss.usermodel.Cell;import org.apache.poi.ss.usermodel.Row;import org.apache.poi.ss.usermodel.Sheet;import org.apache.poi.ss.usermodel.Workbook;import org.apache.poi.xssf.streaming.SXSSFWorkbook;import org.apache.poi.xssf.usermodel.XSSFCell;import org.apache.poi.xssf.usermodel.XSSFWorkbook;import java.io.BufferedReader;import java.io.File;import java.io.FileInputStream;import java.io.FileOutputStream;import java.io.FileReader;import java.net.URL;import java.util.Map;import java.util.Set;@Slf4jpublic class TestExcel {    public static String newFile = "gctrip_city_new.xlsx";    public static String filterFile = "filtered_gctrip_city.xlsx";    public static String originFile = "gctrip_city.xlsx";    public static String originAllFile = "gctrip_all.xlsx";    public static URL baseUrl = TestExcel.class.getClassLoader().getResource("no_city_mapping.txt");    public static URL cityMappingUrl = TestExcel.class.getClassLoader().getResource("city_mapping.txt");    public static URL cityIdUrl = TestExcel.class.getClassLoader().getResource("city_id.txt");    public static Set<String> cityNameSet = Sets.newHashSetWithExpectedSize(7000);    public static Set<String> cityNameMappingSet = Sets.newHashSetWithExpectedSize(7000);    public static Set<Double> cityIdSet = Sets.newHashSetWithExpectedSize(2000);    public static Map<String, Integer> cityFilerMap = Maps.newHashMapWithExpectedSize(7000);    public static Map<Double, String> cityIdNameMap = Maps.newHashMapWithExpectedSize(70000);    public static Set<String> specialCityNameSets = Sets.newHashSet("剑桥", "列治文", "拉斯维加斯", "华盛顿", "卢加诺", "纽卡斯尔", "安大略", "华盛顿", "奥克兰");    public static void main(String args[]) throws Exception {        //test();        //parse();        Map<String, String> extMap = Maps.newHashMap();        extMap.put("a1", "t1");        extMap.put("a2", "t2");        String input = JsonMapper.obj2String(extMap);        System.out.println(input);        Map<String, String> result = JsonMapper.string2Obj(input, Map.class);        System.out.println(result.get("a1") + "---" + result.get("a2"));    }    public static void parse() throws Exception {        readCityId();        Workbook readWorkBook = new XSSFWorkbook(new FileInputStream(originAllFile));        Sheet readSheet = readWorkBook.getSheetAt(0);        log.info("total : {}", readSheet.getLastRowNum());        Workbook writeWorkbook = new SXSSFWorkbook();        Sheet writeSheet = writeWorkbook.createSheet();        int index = 1; // 0为标题行        while (true) {            try {                Row readRow = readSheet.getRow(index);                if (readRow == null) {                    break;                }                Cell readRowCell0 = readRow.getCell(0);                Cell readRowCell1 = readRow.getCell(1);                Cell readRowCell2 = readRow.getCell(2);                String value = readRowCell2.getStringCellValue();                if (StringUtils.isNotBlank(readRowCell0.getStringCellValue()) && specialCityNameSets.contains(value) && !readRowCell0.getStringCellValue()                        .equals("海外")) {                    value = readRowCell0.getStringCellValue() + "," + value;                    log.info("multiple, {}, {}", readRowCell1.getNumericCellValue(), value);                }                cityIdNameMap.put(readRowCell1.getNumericCellValue(), value);                //log.info("{} - {}", readRowCell1.getNumericCellValue(), value);            } catch (Exception e) {                log.error("index: {}", index, e);                throw e;            }            index++;        }        log.info("finish read all, index: {}", index);        Row writeRow = writeSheet.createRow(0);        Cell writeRowCell = writeRow.createCell(0);        writeRowCell.setCellType(XSSFCell.CELL_TYPE_STRING);        writeRowCell.setCellValue("城市ID");        writeRowCell = writeRow.createCell(1);        writeRowCell.setCellType(XSSFCell.CELL_TYPE_STRING);        writeRowCell.setCellValue("城市名称");        int newIndex = 1;        for (Double d : cityIdSet) {            if (!cityIdNameMap.containsKey(d)) {                System.out.println(d.intValue());                continue;            }            writeRow = writeSheet.createRow(newIndex);            writeRowCell = writeRow.createCell(0);            writeRowCell.setCellType(XSSFCell.CELL_TYPE_NUMERIC);            writeRowCell.setCellValue(d);            writeRowCell = writeRow.createCell(1);            writeRowCell.setCellType(XSSFCell.CELL_TYPE_STRING);            writeRowCell.setCellValue(cityIdNameMap.get(d));            newIndex++;        }        FileOutputStream fOut = new FileOutputStream(newFile);        writeWorkbook.write(fOut);        fOut.flush();        fOut.close();    }    public static void test() throws Exception {        // 读取no_city_mapping        readCity();        readCityMapping();        log.info("city mapping size : {}", cityNameSet.size());        Workbook writeWorkbook = new SXSSFWorkbook();        Sheet writeSheet = writeWorkbook.createSheet();        Workbook writeWorkbook2 = new SXSSFWorkbook();        Sheet writeSheet2 = writeWorkbook2.createSheet();        Workbook readWorkBook = new XSSFWorkbook(new FileInputStream(originFile));        Sheet readSheet = readWorkBook.getSheetAt(0);        log.info("total : {}", readSheet.getLastRowNum());        int index = 0;        int newIndex = 0;        int filterIndex = 0;        while (true) {            try {                Row readRow = readSheet.getRow(index);                if (readRow == null) {                    break;                }                Cell readRowCell0 = readRow.getCell(0);                Cell readRowCell1 = readRow.getCell(1);                if (readRow == null || StringUtils.isBlank(readRowCell1.getStringCellValue())) {                    break;                }                String cityName = readRowCell1.getStringCellValue();                if (cityNameSet.contains(cityName) && !cityNameMappingSet.contains(cityName)) {                    if (cityFilerMap.containsKey(cityName)) {                        cityFilerMap.put(cityName, cityFilerMap.get(cityName) + 1);                    } else {                        cityFilerMap.put(cityName, 1);                    }                    Row writeRow = writeSheet2.createRow(filterIndex);                    Cell writeRowCell = writeRow.createCell(0);                    writeRowCell.setCellType(XSSFCell.CELL_TYPE_NUMERIC);                    writeRowCell.setCellValue(readRowCell0.getNumericCellValue());                    writeRowCell = writeRow.createCell(1);                    writeRowCell.setCellType(XSSFCell.CELL_TYPE_STRING);                    writeRowCell.setCellValue(cityName);                    filterIndex++;                } else {                    Row writeRow = writeSheet.createRow(newIndex);                    Cell writeRowCell = writeRow.createCell(0);                    if (index > 0) {                        writeRowCell.setCellType(XSSFCell.CELL_TYPE_NUMERIC);                        writeRowCell.setCellValue(readRowCell0.getNumericCellValue());                    } else {                        writeRowCell.setCellType(HSSFCell.CELL_TYPE_STRING);                        writeRowCell.setCellValue(readRowCell0.getStringCellValue());                    }                    writeRowCell = writeRow.createCell(1);                    writeRowCell.setCellType(XSSFCell.CELL_TYPE_STRING);                    writeRowCell.setCellValue(readRowCell1.getStringCellValue());                    newIndex++;                }            } catch (Exception e) {                log.error("index: {}, newIndex: {}", index, newIndex, e);                throw e;            }            index++;        }        log.info("finish, index: {}, newIndex: {}", index, newIndex);        log.info("generate new gctrip file");        FileOutputStream fOut = new FileOutputStream(newFile);        writeWorkbook.write(fOut);        fOut.flush();        fOut.close();        log.info("generate filtered city file");        FileOutputStream fOut2 = new FileOutputStream(filterFile);        writeWorkbook2.write(fOut2);        fOut2.flush();        fOut2.close();        log.info("filtered multiple items :");        int count = 0;        for (Map.Entry<String, Integer> entry : cityFilerMap.entrySet()) {            if (entry.getValue() > 1) {                log.info(entry.getKey() + " - " + entry.getValue());            }            count += entry.getValue();        }        log.info("filter city size : {}", count);    }    public static void readCity() throws Exception {        BufferedReader br = null;        try {            File file = new File(baseUrl.toURI());            br = new BufferedReader(new FileReader(file));            String line;            while ((line = br.readLine()) != null) {                cityNameSet.add(line);            }        } catch (Exception e) {            throw e;        } finally {            if (br != null) {                br.close();            }        }    }    public static void readCityMapping() throws Exception {        BufferedReader br = null;        try {            File file = new File(cityMappingUrl.toURI());            br = new BufferedReader(new FileReader(file));            String line;            while ((line = br.readLine()) != null) {                cityNameMappingSet.add(line);            }        } catch (Exception e) {            throw e;        } finally {            if (br != null) {                br.close();            }        }    }    public static void readCityId() throws Exception {        BufferedReader br = null;        try {            File file = new File(cityIdUrl.toURI());            br = new BufferedReader(new FileReader(file));            String line;            while ((line = br.readLine()) != null) {                cityIdSet.add(Double.parseDouble(line));            }        } catch (Exception e) {            throw e;        } finally {            if (br != null) {                br.close();            }        }    }}